import os
import logging
from datetime import datetime
from logging import Logger
from typing import Optional
import time
import enum
from colorama import Fore, Style

logger: Logger
initialized = False
reenact = False

os.makedirs("logs", exist_ok=True)


class Levels(enum.Enum):
    DEBUG = logging.DEBUG,
    INFO = logging.INFO,
    WARN = logging.WARN,
    ERROR = logging.ERROR,
    CRITICAL = logging.CRITICAL


REENACT_FILE = "logs/" + datetime.now().strftime("%d.%m.%Y-%H_%M_%S") + "_logs.py"

LOGGER_SOURCE = '''\
# THIS LOGGER WAS GENERATED BY {name}. 
# SOURCE AUTHOR: REDGAMER6427A

import logging
import time
from datetime import datetime
from colorama import Fore, Style

class Logger:
    def format(self, msg:str, level: str, timestamp:float):
        timestamp = datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y-%H:%M:%S")
        if level == "debug":
            color = Fore.LIGHTCYAN_EX
        elif level == "info":
            color = Fore.LIGHTBLUE_EX
        elif level == "warning":
            color = Fore.LIGHTYELLOW_EX
        elif level == "error":
            color = Fore.LIGHTRED_EX
        elif level == "critical":
            color = Fore.RED
        else:
            color = Fore.WHITE
        formatted_message = (
            f"{Fore.LIGHTBLACK_EX}[{timestamp}] {Fore.LIGHTWHITE_EX}{name} "
            f"[{color}{level.upper()}{Fore.LIGHTWHITE_EX}]{color} > "
            f"{Fore.LIGHTWHITE_EX}{color}{msg}{Style.RESET_ALL}"
        )
        return formatted_message

    def msg(self, msg, level, timestamp):
        print(self.format(msg, level, timestamp))

logger: Logger = Logger()
'''


def _write_reenact_header(name: str):
    if not reenact:
        return
    if not os.path.exists(REENACT_FILE):
        with open(REENACT_FILE, "w", encoding="utf-8") as f:
            f.write(LOGGER_SOURCE.replace("{name}", name) + "\n\n")


def _write_reenact(level: str, msg: str):
    if not reenact:
        return
    with open(REENACT_FILE, "a", encoding="utf-8") as f:
        safe_msg = msg.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n")
        f.write(f'logger.msg(\"{safe_msg}\", \"{level}\", {time.time()})\n')


class CustomFormatter(logging.Formatter):
    def format(self, record):
        timestamp = datetime.now().strftime("%d.%m.%Y-%H:%M:%S")
        if record.levelname == "DEBUG":
            color = Fore.LIGHTCYAN_EX
        elif record.levelname == "INFO":
            color = Fore.LIGHTBLUE_EX
        elif record.levelname == "WARNING":
            color = Fore.LIGHTYELLOW_EX
        elif record.levelname == "ERROR":
            color = Fore.LIGHTRED_EX
        elif record.levelname == "CRITICAL":
            color = Fore.RED
        else:
            color = Fore.WHITE
        formatted_message = (
            f"{Fore.LIGHTBLACK_EX}[{timestamp}] {Fore.LIGHTWHITE_EX}{logger.name} "
            f"[{color}{record.levelname}{Fore.LIGHTWHITE_EX}]{color} > "
            f"{Fore.LIGHTWHITE_EX}{color}{record.msg}{Style.RESET_ALL}"
        )
        return formatted_message


def init(name: str, level: Levels, reenact_logs: Optional[bool] = True):
    global logger, initialized, reenact
    reenact = reenact_logs
    logger = logging.getLogger(name)

    # Prevent duplicate handlers
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = CustomFormatter()
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.DEBUG)

    _write_reenact_header(name)
    initialized = True


def _require_init():
    if not initialized:
        raise RuntimeError("Logger not initialized. Call init(name, reenact_logs) first.")


def debug(msg: str):
    _require_init()
    logger.debug(msg)
    _write_reenact("debug", msg)


def info(msg: str):
    _require_init()
    logger.info(msg)
    _write_reenact("info", msg)


def warn(msg: str):
    _require_init()
    logger.warning(msg)
    _write_reenact("warn", msg)


def warning(msg: str):
    warn(msg)


def error(msg: str):
    _require_init()
    logger.error(msg)
    _write_reenact("error", msg)


def critical(msg: str):
    _require_init()
    logger.critical(msg)
    _write_reenact("critical", msg)
